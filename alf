#!/bin/env python3

import re
import sys
import os
import argparse
import subprocess

# ------------------------------------------------------------------------
class LogLine:

    CSI = "\x1B["
    BOLD = CSI + '01m'
    WARNING = BOLD + CSI + '33m'
    ERROR = BOLD + CSI + '95m'
    NORMAL = CSI + 'm'
    NONE = ""

    # --------------------------------------------------------------------
    def __init__(self, line, color=0):
        self.color = color
        try:
            self.line = line.rstrip()
            res = re.findall("([\ ]*)([\ a-zA-Z0-9\(\)]+):[ \t]+(.*)", line)[0]
            self.indent = int(len(res[0]) / 4)
            level_full = res[1]
            lr = re.findall("([\ a-zA-Z]+[a-zA-Z])[ \t]*\(?([0-9]*)\)?", level_full)[0]
            self.level = lr[0]
            if lr[1]:
                self.id = int(lr[1])
            else:
                self.id = 0
            self.message = res[2]
        except Exception:
            self.message = line.rstrip()
            self.line = line.rstrip()
            self.indent = 0
            self.id = 0
            self.level = "LineNotFiltered"

    # --------------------------------------------------------------------
    def __str__(self):
        endcolor = self.NORMAL
        color = self.NONE
        if not self.color:
            color = self.NONE
            endcolor = self.NONE
        elif 'Warning' in self.level:
            color = self.WARNING
        elif self.level == 'Error':
            color = self.ERROR

        if self.id:
            id = " (%i)" % self.id
        else:
            id = ""

        return "%s%s%s%s%s: %s" % (" " * 4*self.indent, color, self.level, endcolor, id, self.message)

# ------------------------------------------------------------------------
class LogFilter:
    # --------------------------------------------------------------------
    def __init__(self, debug=0):
        self.debug = debug
        self.filters = []
        self.supp = []
        self.suppressed = {}

    # --------------------------------------------------------------------
    def is_suppressed(self, l):
        for f in self.supp:
            if l.level == f[0] or l.id == f[1] or l.indent >= f[2]:
                if self.debug:
                    print("*** (%s, %i, %i) suppressed: '%s'" % (f[0], f[1], f[2], l.line))
                return True
        return False

    # --------------------------------------------------------------------
    def add(self, f):
        fr = re.findall("([^:]*)?:([^:]*)?:([^:]*)?", f)[0]
        level = fr[0]
        if fr[1]:
            id = int(fr[1])
        else:
            id = -1
        if fr[2]:
            indent = int(fr[2])
        else:
            indent = 666

        self.supp.append((level, id, indent))

    # --------------------------------------------------------------------
    def process(self, l):
        if not self.is_suppressed(l):
            print(l)
        else:
            try:
                self.suppressed[l.level] += 1
            except KeyError:
                self.suppressed[l.level] = 1

# ------------------------------------------------------------------------
# --- MAIN ---------------------------------------------------------------
# ------------------------------------------------------------------------

# parse commandline

parser = argparse.ArgumentParser()
parser.add_argument("-f", "--filter", help="suppression filter specified as: <level:id:min_indent_level>, any element can be ommited, colons are mandatory", action='append', default=[])
parser.add_argument("-n", "--nodefault", help="ommit default filters", default=0, const=1, action="store_const")
parser.add_argument("-N", "--nothing", help="suppress nothing (ommit all filters - default and specified)", default=0, const=1, action="store_const")
parser.add_argument("-d", "--debug", help="enable filter debug", default=0, const=1, action="store_const")
parser.add_argument("-S", "--stats", help="show message suppression statistics", default=0, const=1, action="store_const")
parser.add_argument("-c", "--color", help="use colored output", default=0, const=1, action="store_const")
parser.add_argument('command', nargs='+', help='altera command to run (with arguments)')
args = parser.parse_args()

# respect NALF environment variable

try:
    if os.environ['NALF'] == "1":
        args.nothing = 1
except:
    pass

# setup default filters

flt = LogFilter(debug=args.debug)

if args.nodefault != 1 and args.nothing != 1:
    flt.add("Info::")
    flt.add("Extra Info::")
    flt.add(":20028:")
    flt.add(":292013:")
    flt.add(":332012:")
    flt.add("::1")

# add user filters

if args.nothing != 1:
    for f in args.filter:
        flt.add(f)

# spawn child process

joined_args = ' '.join(args.command)
p = subprocess.Popen(joined_args, shell=True, stdin=subprocess.DEVNULL, stdout=subprocess.PIPE, bufsize=0, universal_newlines=True)

# parse output

while True:
    line = p.stdout.readline()
    if not line:
        break
    l = LogLine(line, args.color)
    flt.process(l)

# print suppression statistics

if args.stats and flt.suppressed:
    print("*** messages suppressed by the filter:", end="")
    for s in flt.suppressed:
        print(" %s=%i"% (s, flt.suppressed[s]), end="")
    print("")

p.wait()

sys.exit(p.returncode)

# vim: tabstop=4 expandtab shiftwidth=4 softtabstop=4
